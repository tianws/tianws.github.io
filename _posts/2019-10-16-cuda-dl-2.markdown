---
layout:     post
title:      "Ubuntu深度学习环境全配置"
subtitle:   "driver、cuda、cudnn、conda、pytorch、代理、多cuda并存"
date:       2019-10-16 10:00:00
author:     "Tian"
categories: Skill
header-img: "img/post-bg-terminal.jpg"
header-mask: 0.7
catalog: true
tags:
    - 环境配置
    - Ubuntu
typora-root-url: ../
---

## 一、前言

之前写过一篇[NVIDIA显卡配置](https://tianws.github.io/skill/2018/07/04/cuda-dl/)，主要参考官方文档，用包管理器的方式来安装显卡驱动和cuda。

但是这种方法不够灵活，配置自己的机器没问题，如果要在多人共用的服务器上，遇到下列情况时，不好处理：

1. 多版本cuda并存，并不影响其他用户
2. 无sudo权限，安装cuda
3. 使用机器已安装的显卡驱动

这一篇主要记录下针对以上的情况，如何快速稳定地配置深度学习环境。

## 二、安装driver

一般服务器供应商会帮你安装好驱动。如果驱动可用，可以跳过这一节；如果别人安装的驱动不满足要求，用这节的方法可以快速稳定地安装显卡驱动。

**自己重装驱动前，一定一定要记得先卸载原驱动！否则后面可能会遇到各种各样的问题！**

**1、查询显卡和驱动信息**

查看显卡信息：

```bash
lshw -numeric -C display
# or
lspci -vnn | grep VGA
# output
01:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP106 [GeForce GTX 1060 6GB] [10de:1c03] (rev a1) (prog-if 00 [VGA controller])
```

输出显卡型号为`[GeForce GTX 1060 6GB]`。

查看显卡驱动版本：

```bash
# 查看已有显卡驱动版本
lspci -k | grep -EA3 'VGA|3D|Display'

# 查看NAVIDIA驱动版本
nvidia-settings --version
# or
cat /proc/driver/nvidia/version
```

**2、卸载驱动**

驱动兼容性列表：

![01](/img/in-post/2019-10-16-cuda-dl-2/01.png)

推荐先卸载所有NVIDIA驱动。

卸载驱动命令：

```bash
# 卸载驱动runfile方式安装的驱动
sudo /usr/bin/nvidia-uninstall 

# 卸载Deb方式安装的驱动
sudo apt-get --purge remove nvidia* 
sudo apt-get autoremove
```

确保驱动卸载干净后，可以安装我们的驱动了。（可用`nvidia-smi`测试驱动是否可调用）

**3、安装驱动**

[这篇文章](https://blog.csdn.net/tjuyanming/article/details/80862290)总结的很好，安装驱动有三种方法：

- 使用标准Ubuntu仓库进行自动化安装
- 使用PPA仓库进行自动化安装
- 使用官方的NVIDIA驱动进行手动安装（需要禁用Nouveau）

其实还有第四种，就是CUDA Toolkit自带驱动，不过版本是固定的。

这里推荐用第一种方法来安装，这种方法最简单。

（1）检测你的NVIDIA显卡型号和推荐的驱动程序的模型。

在命令行中输入如下命令：

```bash
ubuntu-drivers devices
# 输出类似下列内容
== /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 ==
modalias : pci:v000010DEd00001180sv00001458sd0000353Cbc03sc00i00
vendor   : NVIDIA Corporation
model    : GK104 [GeForce GTX 680]
driver   : nvidia-304 - distro non-free
driver   : nvidia-340 - distro non-free
driver   : nvidia-384 - distro non-free recommended
driver   : xserver-xorg-video-nouveau - distro free builtin
 
== cpu-microcode.py ==
driver   : intel-microcode - distro free
```

从输出结果可以看到，目前系统已连接Nvidia GeFrand GTX 680显卡，建议安装驱动程序是 nvidia-384版本的驱动。

> 注意：在一些server版的Ubuntu中，没有`ubuntu-drivers`命令，可以按下列流程安装：
>
> ```bash
> sudo apt-get install ubuntu-drivers-common 
> # 可访问外网
> # sudo add-apt-repository ppa:graphics-drivers/ppa 
> # 或者用国内反代访问
> sudo add-apt-repository https://launchpad.proxy.ustclug.org/graphics-drivers/ppa/ubuntu 
> ```
>

（2）使用仓库自动化安装

输入安装命令：

```bash
# 安装推荐的驱动程序
sudo ubuntu-drivers autoinstall
# 或者自己选择安装版本
sudo apt install nvidia-340
```

安装结束，重启系统，就完成了。

## 三、安装cuda

在以前的文章[NVIDIA显卡配置](https://tianws.github.io/skill/2018/07/04/cuda-dl/)中说过，安装cuda有两种方法：

1. 用对应系统的包管理器（对Ubuntu系统来讲就是Deb包）
2. 用runfile包

[官方文档](https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html)推荐用包管理器安装，但是为了解决前言中列出的问题，本文推荐用runfile包安装。

**1、查询cuda信息**

查询cuda版本：

```bash
nvcc -V
dpkg -l | grep cuda
```

查询cuda安装位置：

```bash
which nvcc
```

cuda兼容性列表：

![02](/img/in-post/2019-10-16-cuda-dl-2/02.png)

> 注意：用本文的安装方式可以多cuda共存，不需要卸载已有cuda

卸载cuda命令：

```bash
# 卸载runfile方式安装的cuda
sudo /usr/local/cuda-X.Y/bin/uninstall_cuda_X.Y.pl 

# 卸载Deb方式安装的cuda
sudo apt-get --purge remove cuda 
sudo apt-get autoremove
```

**2、安装cuda**

（1）下载cuda

[cuda官网](https://developer.nvidia.com/cuda-toolkit)下载cuda，注意选择`runfile[local]`文件。

（2）执行安装命令

```bash
sh cuda_xxx_linux.run
```

说明：

1. 选择不安装驱动、安装cuda、不安装sample
2. cuda安装目录自定义，但是如果安装到系统路径，需要sudo执行

**3、设置环境变量**

将以下内容添加到`~/.bashrc`或者`~/.zshenv`中：

```bash
# /usr/local/cuda-10.0换成对应cuda安装路径
export PATH=/usr/local/cuda-10.0/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
```

`source`一下修改的文件，然后执行`nvcc -V`，看cuda是否配置成功。

**4、多cuda并存**

多版本cuda的安装方法和上面一样，用runfile安装到另一个路径下即可。

切换cuda版本时，修改环境变量的cuda路径，或者用软链接的方式修改软链接，就可以切换了。

## 四、安装cudnn

**1、查询cudnn信息**

查询cudnn版本：

```bash
# tar方式安装的cudnn
# /usr/local/cuda换成cuda安装路径
cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2

# Deb方式安装的cudnn
dpkg -l | grep cudnn
```

**2、安装cudnn**

cudnn一样也有两种安装方式：

1. 通过tar压缩包安装
2. 通过Deb包管理器安装

本文推荐用tar压缩包安装。

```bash
tar -xzvf cudnn-9.0-linux-x64-v7.tgz
# /usr/local/cuda换成cuda安装路径
sudo cp cuda/include/cudnn.h /usr/local/cuda/include
sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
sudo chmod a+r /usr/local/cuda/include/cudnn.h/usr/local/cuda/lib64/libcudnn*
```

## 五、安装miniconda

**1、下载安装miniconda**

[miniconda下载地址](https://docs.conda.io/en/latest/miniconda.html)

```bash
# 按照提示安装
bash Miniconda3-latest-Linux-x86_64.sh
```

**2、新建conda环境**

```bash
conda create --name pytorch python=3.6
```

**3、设置代理**

（1）设置conda代理：[清华conda镜像](https://mirror.tuna.tsinghua.edu.cn/help/anaconda/)

```bash
vim ~/.condarc
# 添加以下内容
channels:
  - defaults
show_channel_urls: true
default_channels:
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r
custom_channels:
  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
```

（2）设置pip代理：[清华pypi镜像](https://mirror.tuna.tsinghua.edu.cn/help/pypi/)

```bash
# 用镜像升级pip
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U
# 配置镜像
pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple

# 临时使用
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package
```

> （3）可选：[Ubuntu清华镜像](https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/)
>
> ```bash
> # 备份/etc/apt/sources.list，替换为下面内容
> # 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释
> deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse
> # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse
> deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse
> # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse
> deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse
> # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse
> deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse
> # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse
> 
> # 预发布软件源，不建议启用
> # deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse
> # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse
> ```

**4、常用conda命令**

```bash
# 获取版本号
conda -V

# 创建环境
conda create --name your_env_name
# 创建指定python版本的环境
conda create --name your_env_name python=3.6
# 创建包含某些包的环境
conda create --name your_env_name python=3.5 numpy scipy

# 列出当前所有环境
conda env list
conda info -e

# 进入某个环境
conda activate your_env_name

# 查看已安装的包
conda list

# 退出当前环境
deactivate

# 复制某个环境
conda create --name new_env_name --clone old_env_name

# 删除某个环境
conda remove --name your_env_name --all
```

**5、conda、pip环境复制**

```bash
# conda导出已有环境
conda env export > environment.yaml
# 导入环境
conda env create -f environment.yaml
```

```bash
# pip导出已有环境
pip freeze > requirements.txt
# pip导入环境
pip install -r requirements.txt
```

在环境移植的过程中，如果想要在不联网的情况下直接复制别的机器或者自己的环境，可以将env下面对应的环境直接进行拷贝，（只适用于anacoda大版本相近anaconda2与3应该是不行的因为对应路径就已经有了变化），直接将整个环境复制然后全部拷贝到新环境的路径文件夹中。

> 注意：
>
> 直接拷贝到本机时候link文件是不会被拷贝下来的 会使得环境失效 然后解决方案是 通过tar进行压缩之后将环境压缩包拷贝到新的机器文件夹下面 解压即可 如果想改变环境名字 直接更改环境对应的文件夹名字即可。

## 六、安装pytorch

**1、安装最新pytorch：**

[官网链接](https://pytorch.org/)

```bash
conda install pytorch torchvision cudatoolkit=10.1 -c pytorch
```

**2、指定pytorch版本:**

```bash
conda install pytorch=1.0 torchvision cudatoolkit=10.1 -c pytorch
```

**3、指定cuda版本：**

```bash
conda install pytorch torchvision cudatoolkit=9.0 -c pytorch
```

## 参考

- [Ubuntu 18.04 NVIDIA驱动安装总结](https://blog.csdn.net/tjuyanming/article/details/80862290)
- [How to install the NVIDIA drivers on Ubuntu 18.04 Bionic Beaver Linux](https://linuxconfig.org/how-to-install-the-nvidia-drivers-on-ubuntu-18-04-bionic-beaver-linux)
- [Install the Latest Nvidia Linux Driver](https://linuxconfig.org/install-the-latest-nvidia-linux-driver)
- [ppa/pip/anaconda/npm在中国大陆很慢怎么办？](https://www.zhenyan.io/zh-cn/Download-Open-Source-Resources-Faster-in-Mainland-China/)
- [anaconda使用教程+直接环境拷贝移植所遇到的问题解决](https://blog.csdn.net/qq_41554005/article/details/89052435)

