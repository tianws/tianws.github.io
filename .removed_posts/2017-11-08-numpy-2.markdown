---
layout:     post
title:      "Numpy常用操作（二）"
subtitle:   "Numpy的索引、合并和分割"
date:       2017-11-08 18:57:00
author:     "Tian"
header-img: "img/post_2017_11_08.jpg"
catalog: true
tags:
    - numpy
---

###  Numpy 索引

##### 一维索引

我们都知道，在元素列表或者数组中，我们可以用如同`a[2]`一样的表示方法，同样的，在Numpy中也有相对应的表示方法：

```python
import numpy as np
A = np.arange(3,15)

# array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])
         
print(A[3])    # 6
```

让我们将矩阵转换为二维的，此时进行同样的操作：

```python
A = np.arange(3,15).reshape((3,4))
"""
array([[ 3,  4,  5,  6]
       [ 7,  8,  9, 10]
       [11, 12, 13, 14]])
"""
         
print(A[2])         
# [11 12 13 14]
```

实际上这时的`A[2]`对应的就是矩阵`A`中第三行(从0开始算第一行)的所有元素。

##### 二维索引

如果你想要表示具体的单个元素，可以仿照上述的例子：

```python
print(A[1][1])      # 8
```

此时对应的元素即`A[1][1]`，在`A`中即横纵坐标都为1，第二行第二列的元素，即8（因为计数从0开始）。同样的还有其他的表示方法：

```python
print(A[1, 1])      # 8
```

在Python的 list 中，我们可以利用`:`对一定范围内的元素进行切片操作，在Numpy中我们依然可以给出相应的方法：

```python
print(A[1, 1:3])    # [8 9]
```

这一表示形式即针对第二行中第2到第4列元素进行切片输出（不包含第4列）。
此时我们适当的利用for函数进行打印：

```python
for row in A:
    print(row)
"""    
[ 3,  4,  5, 6]
[ 7,  8,  9, 10]
[11, 12, 13, 14]
"""
```

此时它会逐行进行打印操作。如果想进行逐列打印，就需要稍稍变化一下：

```python
for column in A.T:
    print(column)
"""  
[ 3,  7,  11]
[ 4,  8,  12]
[ 5,  9,  13]
[ 6, 10,  14]
"""
```

上述表示方法即对A进行转置，再将得到的矩阵逐行输出即可得到原矩阵的逐列输出。

最后依然说一些关于迭代输出的问题：

```python
import numpy as np
A = np.arange(3,15).reshape((3,4))
         
print(A.flatten())   
# array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])

for item in A.flat:
    print(item)
    
# 3
# 4
……
# 14
```

这一脚本中的`flatten`是一个展开性质的函数，将多维的矩阵进行展开成1行的数列。而`flat`是一个迭代器，本身是一个`object`属性。

### Numpy array 合并

##### np.vstack()

对于一个`array`的合并，我们可以想到按行、按列等多种方式进行合并。首先先看一个例子：

```python
import numpy as np
A = np.array([1,1,1])
B = np.array([2,2,2])
         
print(np.vstack((A,B)))    # vertical stack
"""
[[1,1,1]
 [2,2,2]]
"""
```

`vertical stack`本身属于一种上下合并，即对括号中的两个整体进行对应操作。此时我们对组合而成的矩阵进行属性探究：

```python
C = np.vstack((A,B))      
print(A.shape,C.shape)

# (3,) (2,3)
```


利用`shape`函数可以让我们很容易地知道`A`和`C`的属性，从打印出的结果来看，`A`仅仅是一个拥有3项元素的数组（数列），而合并后得到的`C`是一个2行3列的矩阵。

##### np.hstack()

介绍完了上下合并，我们来说说左右合并：

```python
D = np.hstack((A,B))       # horizontal stack

print(D)
# [1,1,1,2,2,2]

print(A.shape,D.shape)
# (3,) (6,)
```

通过打印出的结果可以看出：`D`本身来源于`A`，`B`两个数列的左右合并，而且新生成的`D`本身也是一个含有6项元素的序列。

##### np.newaxis()

说完了`array`的合并，我们稍稍提及一下前一节中转置操作，如果面对如同前文所述的`A`序列，
转置操作便很有可能无法对其进行转置（因为`A`并不是矩阵的属性），此时就需要我们借助其他的函数操作进行转置：

```python
print(A[np.newaxis,:])
# [[1 1 1]]

print(A[np.newaxis,:].shape)
# (1,3)

print(A[:,np.newaxis])
"""
[[1]
[1]
[1]]
"""

print(A[:,np.newaxis].shape)
# (3,1)
```

此时我们便将具有3个元素的`array`转换为了1行3列以及3行1列的矩阵了。

结合着上面的知识，我们把它综合起来：

```python
import numpy as np
A = np.array([1,1,1])[:,np.newaxis]
B = np.array([2,2,2])[:,np.newaxis]
         
C = np.vstack((A,B))   # vertical stack
D = np.hstack((A,B))   # horizontal stack

print(D)
"""
[[1 2]
[1 2]
[1 2]]
"""

print(A.shape,D.shape)
# (3,1) (3,2)
```

##### np.concatenate()

当你的合并操作需要针对多个矩阵或序列时，借助`concatenate`函数可能会让你使用起来比前述的函数更加方便：

```python
C = np.concatenate((A,B,B,A),axis=0)

print(C)
"""
array([[1],
       [1],
       [1],
       [2],
       [2],
       [2],
       [2],
       [2],
       [2],
       [1],
       [1],
       [1]])
"""

D = np.concatenate((A,B,B,A),axis=1)

print(D)
"""
array([[1, 2, 2, 1],
       [1, 2, 2, 1],
       [1, 2, 2, 1]])
"""
```

`axis`参数很好的控制了矩阵的纵向或是横向打印，相比较`vstack`和`hstack`函数显得更加方便。

### Numpy array 分割

##### 创建数据

首先 `import` 模块

```python
import numpy as np
```

建立3行4列的Array

```python
A = np.arange(12).reshape((3, 4))
print(A)
"""
array([[ 0,  1,  2,  3],
    [ 4,  5,  6,  7],
    [ 8,  9, 10, 11]])
"""
```

##### 纵向分割

```python
print(np.split(A, 2, axis=1))
"""
[array([[0, 1],
        [4, 5],
        [8, 9]]), array([[ 2,  3],
        [ 6,  7],
        [10, 11]])]
"""
```

##### 横向分割

```python
print(np.split(A, 3, axis=0))

# [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]
```

##### 错误的分割

范例的Array只有4列，只能等量对分，因此输入以下程序代码后Python就会报错。

```python
print(np.split(A, 3, axis=1))

# ValueError: array split does not result in an equal division
```

为了解决这种情况, 我们会有下面这种方式.

##### 不等量的分割

在机器学习时经常会需要将数据做不等量的分割，因此解决办法为`np.array_split()`

```python
print(np.array_split(A, 3, axis=1))
"""
[array([[0, 1],
        [4, 5],
        [8, 9]]), array([[ 2],
        [ 6],
        [10]]), array([[ 3],
        [ 7],
        [11]])]
"""
```

成功将Array不等量分割!

##### 其他的分割方式

在Numpy里还有`np.vsplit()`与横`np.hsplit()`方式可用。

```python
print(np.vsplit(A, 3)) #等于 print(np.split(A, 3, axis=0))

# [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]


print(np.hsplit(A, 2)) #等于 print(np.split(A, 2, axis=1))
"""
[array([[0, 1],
       [4, 5],
       [8, 9]]), array([[ 2,  3],
        [ 6,  7],
        [10, 11]])]
"""
```

### Numpy copy & deep copy

##### = 的赋值方式会带有关联性
首先 `import numpy` 并建立变量, 给变量赋值。

```python
import numpy as np

a = np.arange(4)
# array([0, 1, 2, 3])

b = a
c = a
d = b
```

改变`a`的第一个值，`b`、`c`、`d`的第一个值也会同时改变。

```python
a[0] = 11
print(a)
# array([11,  1,  2,  3])
```

确认`b`、`c`、`d`是否与`a`相同。

```python
b is a  # True
c is a  # True
d is a  # True
```

同样更改`d`的值，`a`、`b`、`c`也会改变。

```python
d[1:3] = [22, 33]   # array([11, 22, 33,  3])
print(a)            # array([11, 22, 33,  3])
print(b)            # array([11, 22, 33,  3])
print(c)            # array([11, 22, 33,  3])
```

##### copy() 的赋值方式没有关联性

```python
b = a.copy()    # deep copy
print(b)        # array([11, 22, 33,  3])
a[3] = 44
print(a)        # array([11, 22, 33, 44])
print(b)        # array([11, 22, 33,  3])
```

此时`a`与`b`已经没有关联。
